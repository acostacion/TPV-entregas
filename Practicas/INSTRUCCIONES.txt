Puntos clave SMB TPV

1. Texture [DONE].
	- Tamaño total y tamaño de sus frames.
	- Métodos para construir/cargar/dibujar (en su pos)/destruir textura.
	- Dibujar textura entera (render) o un frame (renderFrame).

2. Vector2D [DONE].

3. TileMap: dibuja fondo y obstáculos conforme avanza el personaje.
	- Puntero a la textura (textura de texturitas).
	- Matriz de índices (para luego elegir la texturita).
	- Métodos:
		- Constructora (lee la matriz desde el CSV).
		- Render.
		- Update.
		- Hit (colisiones de los obstáculos).

4. Block
5. Goomba
6. Koopa
7. Mushroom
8. Player.
	- Posición.
	- Puntero a su textura.
	- Puntero al juego.
	- Dirección de movimiento.
	- Número de vidas.
	- Aspecto (M o SM).
	- Métodos:
		- Render.
		- Update (movement).
		- Hit (daño).
		- HandleEvent (eventos teclado que determianan el movement).
	- Cosas: 
		- Si mario colisiona con enemigo/ cae en fosa -> menor nº de vidas && volverá a su pos inicial.
		- Si está modo SM, al chocar con un enemigo, se vuelve M (e invulnerable durante unos segs).
		- Si alcanza el mástil o pierde todas las vidas, se finaliza el juego.

9. Game.
	- Tamaño de la ventana.
	- Desplazamiento del mapa (mapOffset).
	- Punteros a la ventana y al renderer.
	- Punteros a los elementos del juego (vector).
	- Booleano exit.
	- Array de texturas.
	- Métodos:
		- Inicialización y destrucción.
		- Run (bucle principal).
		- Render (estado actual del juego).
		- Update.
		- Manejar eventos (handleEvents).
		- Sin abusar podrá tener getMapOffset o collides.

CARGA DE TEXTURAS
- Han de cargarse durante la inicialización (constructora de Game).
- Han de guardarse en un array estático (tipo array) de NUM_TEXTURES elementos de tipo Texture* cuyos índices serán valores de un enum TextureName con los nombres de distintas texturas.
- Han de definirse los nombres de ficheros de imágenes y los nº de frames en horizontal y vertical.
- Usar la cons TEXTURE_ROOT con valor "../assets/images/"

RENDERIZADO DEL JUEGO
- En el método run del game se llama a todos los renders y lo presenta en pantalla SDL_RenderPresent.
- Cada objeto sabe como pintarse (sabe su tamaño, textura, rect).
- SDL_RenderCopy es el renderizado real.
- Hay que distinguir entre rectángulo de colisión (coords absolutas) y rectángulo de renderizado (coords relativas).

MOVIMIENTO DE LOS PERSONAJES
- Se organiza desde clase Game:
	- Se llama al update (invocado desde el bucle principal del run).
	- El update va a llamando a los update de todos los elementos del juego (cada objeto sabe lo que tiene que hacer).
	- Los objetos del juego tienen que tener un puntero a Game para llamar a sus métodos collides.
- Implementación movimiento mario: se desplazará en horizontal a velocidad constante mientras se pulse <- o ->.
	- Cuando se pulsa una tecla o se suelta, en el handleEvent del game, se invoca al handleEvent del player, que actualizará la posición.
	- El protagonista en el update se desplaza segun la dir establecida.
	- No hay que actualizar la posición al pusar la tecla, sino a través de la dirección.

SEGUIR
